#!/bin/bash


function create-readme() {
    cat > README.md << EOF
# lisez-moi

Ce dépôt sert à ilustrer 
notre cours sur **git**
EOF
}


function fix-readme() {
    sed -i.fixed -e 's/ilustrer/illustrer/' README.md
    rm -f *.fixed
}


function create-license() {
    echo 'Licence Creative Commons BY-NC-ND 4.0' > LICENSE
}


function create-code() {
    cat > factorial.py <<EOF
#!/usr/bin/python3

# factoriel mais avec un petit bug dedans

def factorial(n):
    if n <= 0:
        return n
    else:
        return n * factorial(n-1)
EOF
}


function create-doc() {
    cat > factorial.md << EOF
# la fonction \`factorial\`

renvoie le factoriel de son argument
EOF
}


function fix-code() {
    sed -i.fixed -e 's/n <= 0/n <= 1/' factorial.py
    rm -f *.fixed
}


function no-worries-1() {
    sed -i.fixed -e '2 i\
# un changement sans problème' factorial.md
    rm -f *.fixed    
}


function no-worries-2() {
    sed -i.fixed 's/mais avec un petit bug dedans/avec bug corrigé/' factorial.py
    rm -f *.fixed    
}


function conflict-1() {
    sed -i.fixed -e 's/renvoie le factoriel de/renvoie le résultat de factoriel sur/' factorial.md
    rm -f *.fixed
}


function conflict-2() {
    sed -i.fixed -e 's/argument/paramètre/' factorial.md
    rm -f *.fixed
}


function resolve-conflict() {
    sed -i.fixed -e '/HEAD/{N;N;N;N;N;d;}' factorial.md
    echo 'renvoie le résultat de factoriel sur son paramètre' >> factorial.md
    rm -f *.fixed

}


function both-kinds-of-changes() {
    echo "δ2: une ligne dans l'index" >> README.md
    git add README.md
    echo "δ1: pas dans l'index" >> README.md
}

################################
function populate-repo-alice() {
    git init
    create-readme
    fix-readme
    create-license
    git add README.md LICENSE
    git commit -m 'readme + licence'
    
    git checkout -b devel
    create-code 
    fix-code
    create-doc
    git add factorial.py factorial.md
    git commit -m'code + doc'
    
}

function first-commit-in-alice() {
    no-worries-2
    git add factorial.py
    git commit -m "fix factorial by alice repo"
}

function commit-in-initial-for-simple-push() {
    echo 'un changement fait dans initial pour être poussé' >> README.md
    git add README.md
    git commit -m 'premier push'
}

# broken push
function commit-alice() {
    echo 'added by alice' >> README.md
    git add README.md
    git commit -m 'contribution Alice dans README'
}
function commit-bob() {
    echo 'added by bob' >> LICENSE
    git add LICENSE
    git commit -m 'contribution Bob dans LICENSE'
}

# initialize repo-rebase
function rebase-init() {
    git init
    for i in $(seq 20); do
        printf "%02d\n" $i
    done > FILE
    git add FILE
    git commit -m A 
}

function rebase-master-branch() {
    sed -i.patched -e "s/02/02 commit B/" FILE
    git add FILE
    git commit -m B
    sed -i.patched -e "s/04/04 commit C/" FILE
    git add FILE
    git commit -m OOPS
}

function rebase-devel-branch() {
    git checkout -b devel HEAD^^
    sed -i.patched -e "s/06/06 commit D/" FILE
    git add FILE
    git commit -m D
    sed -i.patched -e "s/08/08 commit E/" FILE
    git add FILE
    git commit -m E
    git checkout master
}


function change-factorial-py-beginning() {
    sed -i.fixed -e '3 i\
# une modification au début du fichier' factorial.py
    rm -f *.fixed    
}

function change-factorial-py-end() {
    sed -i.fixed -e '$ i\
# une modification à la fin du fichier' factorial.py
    rm -f *.fixed    
}


# do init-rebase -> appelle init-rebase
"$@"
